name: Build Backends + Docker + Release

on:
  push:
    tags:
      - "v*"

jobs:
  package-backends:
    name: Package ${{ matrix.backend }}-${{ matrix.runner }}-${{ matrix.device }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        runner: [ubuntu-latest, macos-latest]
        device: [cpu, gpu]
        backend: [face, voice]
        exclude:
          - runner: macos-latest
            device: gpu
            backend: face
          - runner: macos-latest
            device: gpu
            backend: voice
          - runner: ubuntu-latest
            device: cpu
            backend: face
          - runner: ubuntu-latest
            device: cpu
            backend: voice
    steps:
      - name: Free Disk Space (Linux)
        if: matrix.runner == 'ubuntu-latest'
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/share/chromium /usr/local/.ghcup /usr/share/swift /opt/hostedtoolcache/swift
          sudo rm -rf /usr/local/lib/node_modules /opt/hostedtoolcache/go /opt/hostedtoolcache/Ruby
          docker system prune --all --force --volumes
          sudo apt-get autoremove -y
          sudo apt-get clean
          pip cache purge || true
          df -h

      - name: Free Disk Space (macOS)
        if: matrix.runner == 'macos-latest'
        run: |
          sudo rm -rf /usr/local/share/chromium /usr/local/.ghcup /usr/share/swift
          sudo rm -rf /usr/local/lib/node_modules
          pip cache purge || true
          df -h

      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - run: python -m pip install --upgrade pip==23.3.2 setuptools wheel

      - run: python --version

      - name: Install Linux System Dependencies
        if: ${{ matrix.runner == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake git wget unzip libsndfile1 ffmpeg libffi-dev libssl-dev portaudio19-dev
          if [ "${{ matrix.device }}" == "gpu" ]; then
            sudo apt-get install -y nvidia-cuda-toolkit || echo "Skipped CUDA install"
          fi

      - name: Install macOS System Dependencies
        if: ${{ matrix.runner == 'macos-latest' }}
        run: |
          brew install git wget unzip libsndfile ffmpeg libomp portaudio

      # ===================================================================
      # NEW TESTING STEPS START HERE
      # ===================================================================

      - name: Download Models for Testing # <-- ADDED STEP 1
        run: |
          echo "--- Downloading models required for tests ---"
          # Create directories for models based on test scripts
          mkdir -p backends/voice/rvc_models/Klee
          mkdir -p backends/face/models/insightface
          mkdir -p backends/face/models/gfpgan

          # --- Voice Models ---
          # NOTE: Replace with your actual model URLs if these are not correct
          wget -q -O backends/voice/rvc_models/hubert_base.pt https://huggingface.co/lj1995/VoiceConversionWebUI/resolve/main/hubert_base.pt
          wget -q -O backends/voice/rvc_models/Klee/Klee.pth https://huggingface.co/Rejekts/project-rvc-klee/resolve/main/Klee.pth

          # --- Face Models ---
          wget -q -O backends/face/models/insightface/inswapper_128.onnx https://huggingface.co/deepinsight/inswapper/resolve/main/inswapper_128.onnx
          wget -q -O backends/face/models/gfpgan/GFPGANv1.4.pth https://github.com/TencentARC/GFPGAN/releases/download/v1.3.0/GFPGANv1.4.pth
          echo "--- Finished downloading models ---"

      - name: Install Dependencies & Run Tests # <-- ADDED STEP 2
        run: |
          # Install main requirements first
          pip install -r backends/${{ matrix.backend }}/requirements.txt

          # Install extra dependencies needed only for testing
          pip install opencv-python-headless soundfile librosa

          # Run the specific test script based on the matrix backend
          if [ "${{ matrix.backend }}" == "face" ]; then
            echo "--- Running Face Backend Tests ---"
            python backends/face/tests/test_face_processor.py
          elif [ "${{ matrix.backend }}" == "voice" ]; then
            echo "--- Running Voice Backend Tests ---"
            python backends/voice/tests/test_wrapper.py
          fi

      - name: Clean Up Test Models # <-- ADDED STEP 3
        run: |
          echo "--- Removing downloaded models to keep final artifact clean ---"
          rm -rf backends/voice/rvc_models
          rm -rf backends/face/models

      # ===================================================================
      # END OF NEW TESTING STEPS
      # ===================================================================

      - name: Package Backend with PyInstaller
        run: python scripts/package_zip.py
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_RUNNER: ${{ matrix.runner }}
          GITHUB_DEVICE: ${{ matrix.device }}
          GITHUB_BACKEND: ${{ matrix.backend }}

      - name: Clean up PyInstaller build files
        run: |
          rm -rf build_*/*/build build_*/*/dist build_*/*/venv *.spec || true
          pip cache purge || true
          df -h

      - uses: actions/upload-artifact@v4
        with:
          name: backend-${{ matrix.backend }}-${{ matrix.runner }}-${{ matrix.device }}
          path: "*.zip"

  create-release:
    runs-on: ubuntu-latest
    needs: package-backends
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: release

      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          files: release/*/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-builds:
    name: Build Docker ${{ matrix.backend }}
    runs-on: ubuntu-latest
    needs: package-backends
    strategy:
      matrix:
        backend: [face, voice]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: actions/download-artifact@v4
        with:
          name: backend-${{ matrix.backend }}-ubuntu-latest-gpu
          path: backends_dist/${{ matrix.backend }}

      - run: |
          cd backends_dist/${{ matrix.backend }}
          unzip *.zip
          rm *.zip

      - uses: docker/build-push-action@v5
        with:
          context: ./backends_dist/${{ matrix.backend }}
          file: ./backends/${{ matrix.backend }}/Dockerfile.${{ matrix.backend }}.gpu
          push: true
          tags: |
            spruceemma/${{ matrix.backend }}-backend:${{ github.ref_name }}
            spruceemma/${{ matrix.backend }}-backend:latest

  test-docker-images:
    name: Test Dockerized Backend ${{ matrix.backend }}
    runs-on: ubuntu-latest
    needs: docker-builds # This job runs ONLY after images are built and pushed
    strategy:
      fail-fast: false
      matrix:
        # Define backends and their corresponding ports for testing
        include:
          - backend: face
            port: 8081 # As defined in face_main.py
          - backend: voice
            port: 8080 # As defined in voice_main.py
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull the specific Docker Image for testing
        run: docker pull spruceemma/${{ matrix.backend }}-backend:${{ github.ref_name }}

      - name: Run Docker Container in background
        run: |
          docker run -d --name test-container \
            -p ${{ matrix.port }}:${{ matrix.port }} \
            spruceemma/${{ matrix.backend }}-backend:${{ github.ref_name }}

      - name: Wait for Server to Initialize
        run: |
          echo "Waiting up to 30 seconds for container to initialize (model downloads, etc.)..."
          sleep 30

      - name: Perform Health Check (Smoke Test)
        # The --fail flag causes curl to exit with an error code if the HTTP request fails (e.g., 404, 503)
        run: |
          echo "Pinging the health check endpoint..."
          curl --fail http://localhost:${{ matrix.port }}/health

      - name: Check Container Logs for Errors
        # This provides valuable debug info if the health check fails
        run: |
          echo "--- Displaying Container Logs ---"
          docker logs test-container

      - name: Cleanup Container
        # The 'if: always()' ensures this step runs even if the health check fails, keeping the runner clean
        if: always()
        run: |
          docker stop test-container
          docker rm test-container
