name: Build Backends + Docker + Release

on:
  push:
    tags:
      - "v*"

jobs:
  package-backends:
    name: Package ${{ matrix.backend }}-${{ matrix.runner }}-${{ matrix.device }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        runner: [ubuntu-latest, macos-latest]
        device: [cpu, gpu]
        backend: [face, voice]
        exclude:
          - runner: macos-latest
            device: gpu
            backend: face
          - runner: macos-latest
            device: gpu
            backend: voice
          - runner: ubuntu-latest
            device: cpu
            backend: face
          - runner: ubuntu-latest
            device: cpu
            backend: voice
    steps:
      - name: Free Disk Space (Linux)
        if: matrix.runner == 'ubuntu-latest'
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/share/chromium /usr/local/.ghcup /usr/share/swift /opt/hostedtoolcache/swift
          sudo rm -rf /usr/local/lib/node_modules /opt/hostedtoolcache/go /opt/hostedtoolcache/Ruby
          docker system prune --all --force --volumes
          sudo apt-get autoremove -y
          sudo apt-get clean
          pip cache purge || true
          df -h

      - name: Free Disk Space (macOS)
        if: matrix.runner == 'macos-latest'
        run: |
          sudo rm -rf /usr/local/share/chromium /usr/local/.ghcup /usr/share/swift
          sudo rm -rf /usr/local/lib/node_modules
          pip cache purge || true
          df -h

      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - run: python -m pip install --upgrade pip==23.3.2 setuptools wheel

      - run: python --version

      - name: Install Linux System Dependencies
        if: ${{ matrix.runner == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake git wget unzip libsndfile1 ffmpeg libffi-dev libssl-dev portaudio19-dev
          if [ "${{ matrix.device }}" == "gpu" ]; then
            sudo apt-get install -y nvidia-cuda-toolkit || echo "Skipped CUDA install"
          fi

      - name: Install macOS System Dependencies
        if: ${{ matrix.runner == 'macos-latest' }}
        run: |
          brew install git wget unzip libsndfile ffmpeg libomp portaudio

      - name: Package Backend with PyInstaller
        run: python scripts/package_zip.py
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_RUNNER: ${{ matrix.runner }}
          GITHUB_DEVICE: ${{ matrix.device }}
          GITHUB_BACKEND: ${{ matrix.backend }}

      - name: Clean up PyInstaller build files
        run: |
          rm -rf build_*/*/build build_*/*/dist build_*/*/venv *.spec || true
          pip cache purge || true
          df -h

      - uses: actions/upload-artifact@v4
        with:
          name: backend-${{ matrix.backend }}-${{ matrix.runner }}-${{ matrix.device }}
          path: "*.zip"

  create-release:
    runs-on: ubuntu-latest
    needs: package-backends
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: release

      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          files: release/*/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-builds:
    name: Build Docker ${{ matrix.backend }}
    runs-on: ubuntu-latest
    needs: package-backends
    strategy:
      matrix:
        backend: [face, voice]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Copy PyInstaller outputs to Docker context
        run: |
          mkdir -p backends_dist/${{ matrix.backend }}
          cp -r backends/${{ matrix.backend }}/dist/* backends_dist/${{ matrix.backend }}/

      - uses: docker/build-push-action@v5
        with:
          context: ./backends_dist/${{ matrix.backend }}
          file: ./backends/${{ matrix.backend }}/Dockerfile.${{ matrix.backend }}.gpu
          push: true
          tags: |
            spruceemma/${{ matrix.backend }}-backend:${{ github.ref_name }}
            spruceemma/${{ matrix.backend }}-backend:latest

  test-docker-images:
    name: Test Dockerized Backend ${{ matrix.backend }}
    runs-on: ubuntu-latest
    needs: docker-builds
    strategy:
      fail-fast: false
      matrix:
        include:
          - backend: face
            port: 8081
          - backend: voice
            port: 8080
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull the specific Docker Image for testing
        run: docker pull spruceemma/${{ matrix.backend }}-backend:${{ github.ref_name }}

      - name: Run Docker Container in background
        run: |
          docker run -d --name test-container \
            -p ${{ matrix.port }}:${{ matrix.port }} \
            spruceemma/${{ matrix.backend }}-backend:${{ github.ref_name }}

      - name: Wait for Server to Initialize
        run: |
          echo "Waiting up to 30 seconds for container to initialize (model downloads, etc.)..."
          sleep 30

      - name: Perform Health Check (Smoke Test)
        run: |
          echo "Pinging the health check endpoint..."
          curl --fail http://localhost:${{ matrix.port }}/health

      - name: Check Container Logs for Errors
        run: |
          echo "--- Displaying Container Logs ---"
          docker logs test-container

      - name: Cleanup Container
        if: always()
        run: |
          docker stop test-container
          docker rm test-container
