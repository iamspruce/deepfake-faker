name: Build Backends + Docker + Release

on:
  push:
    tags:
      - "v*" # triggers on tag push

jobs:
  package-backends:
    name: Package ${{ matrix.runner }}-${{ matrix.device }} Backends
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        runner: [ubuntu-latest, windows-latest, macos-latest]
        device: [cpu, gpu]
        exclude:
          - runner: macos-latest
            device: gpu

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # üßπ Free up disk space on Linux runners
      - name: Free Disk Space
        if: ${{ matrix.runner == 'ubuntu-latest' }}
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          df -h

      - name: Install Linux System Dependencies
        if: ${{ matrix.runner == 'ubuntu-latest' }}
        run: |
          sudo apt-get update || { echo "apt-get update failed"; exit 1; }
          sudo apt-get install -y build-essential cmake git wget unzip libsndfile1 ffmpeg libffi-dev libssl-dev portaudio19-dev || { echo "apt-get install failed"; exit 1; }
          if [ "${{ matrix.device }}" == "gpu" ]; then
            # Install *runtime* CUDA libs instead of full toolkit (saves space)
            sudo apt-get install -y nvidia-cuda-toolkit-gcc || echo "Skipped full CUDA install"
          fi

      - name: Install Windows System Dependencies
        if: ${{ matrix.runner == 'windows-latest' }}
        run: |
          choco install -y git wget unzip ffmpeg || { echo "choco install failed"; exit 1; }

      - name: Install macOS System Dependencies
        if: ${{ matrix.runner == 'macos-latest' }}
        run: |
          brew install git wget unzip libsndfile ffmpeg libomp portaudio || { echo "brew install failed"; exit 1; }

      - name: Downgrade pip
        run: python -m pip install pip==23.3.2

      - name: Package Backends with PyInstaller
        run: python scripts/package_zip.py
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_RUNNER: ${{ matrix.runner }}
          GITHUB_DEVICE: ${{ matrix.device }}
        working-directory: ${{ github.workspace }}

      # üßπ Purge pip cache to recover space
      - name: Clean pip cache
        run: |
          pip cache purge || true

      # üßπ Remove venv after packaging (binary is already built)
      - name: Cleanup venv
        run: |
          rm -rf build_*/*/venv || true

      - name: Upload Zip Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-${{ matrix.runner }}-${{ matrix.device }}
          path: "*.zip"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: package-backends
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
        continue-on-error: true

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: artifacts/*/*.zip
        continue-on-error: true

  docker-runpod:
    name: Build Docker Images for Runpod (Linux GPU)
    runs-on: ubuntu-latest
    needs: package-backends
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      # üßπ Free up disk space before Docker build
      - name: Free Disk Space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          df -h

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download Linux GPU zips from artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-ubuntu-latest-gpu
          path: backends_dist
        continue-on-error: true

      - name: Unzip Artifacts
        run: |
          unzip -o backends_dist/face-linux-gpu-*.zip -d backends_dist/face || echo "No face-linux-gpu zip found"
          unzip -o backends_dist/voice-linux-gpu-*.zip -d backends_dist/voice || echo "No voice-linux-gpu zip found"

      # üßπ Clean pip cache inside runner to avoid unnecessary gigabytes
      - name: Clean pip cache
        run: |
          pip cache purge || true

      # üê≥ Build & push Face Docker image
      - name: "Build and Push Docker Image: Face"
        uses: docker/build-push-action@v5
        with:
          context: ./backends_dist/face
          file: ./backends/face/Dockerfile.face.gpu
          push: true
          tags: "spruceemma/face-backend:${{ github.ref_name }},spruceemma/face-backend:latest"
        continue-on-error: true

      # üê≥ Build & push Voice Docker image
      - name: "Build and Push Docker Image: Voice"
        uses: docker/build-push-action@v5
        with:
          context: ./backends_dist/voice
          file: ./backends/voice/Dockerfile.voice.gpu
          push: true
          tags: "spruceemma/voice-backend:${{ github.ref_name }},spruceemma/voice-backend:latest"
        continue-on-error: true
